# -*- coding: utf-8 -*-
"""Conversion of COCO data format to JSON data format.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A-fOiufjFcUObm65Z_oKl3uWP9-dEo8Y

# Present work deals with the conversion of COCO data format to JSON data format

## Downloading the file and loading it
"""

#Importing the python json library
import json

#Reading the content of the file that have data in COCO format using 'with open'
#Notice, the file is opened in 'r' mode to read the content of the file
with open ('/content/drive/MyDrive/Onelearn_Data_Science_Course/instances_val2017.json','r') as f:
    data=f.read()

#Using json.loads to parse the data into json format, this will create a dictionary
final_data=json.loads(data)

#Checking the type of the data using type function

print(type(final_data))

#Extracting the keys of the dictionary using .keys() dictionary method
#Allocating the keys to list_keys variable

list_keys=list(final_data.keys())
list_keys

"""# Checking for data types and length of values for initial keys"""

#Printing the value of the first key 'info' by extracting the first element of list_keys[0]
#So first, let us check the data type and length of the first key output

print(f"Data type is {type(final_data[list_keys[0]])}, Length is = {len(final_data[list_keys[0]])}")

#So printing the full data here

final_data[list_keys[0]]

#Printing the value of the second key 'licence' by extracting the second element of list_keys[1]
#So first, let us check the data type and length of the first key output

print(f"Data type is {type(final_data[list_keys[1]])}, Length is = {len(final_data[list_keys[1]])}")

#Printing only 3 initial dictionaries here

final_data[list_keys[1]][:3]

"""# Printing a sample of the dictionary"""

#Creation of a sample of the json

#Starting with defining a empty dictionary
sample_json={}

for item in list_keys: 
    data_json=final_data[item]
    if type(data_json)==dict:
        sample_json[item]=data_json
    elif type(data_json)==list:
        list_of_list=[]
        len_listoflist=len(data_json)
        # sample_json[item]=[]
        inner_dict_keys=list(final_data[item][0].keys())

        for i in range(1):
            inner_dict={}
            for keys in inner_dict_keys:
                inner_dict[keys]=final_data[item][i][keys]
            list_of_list.append(inner_dict)
        sample_json[item]=list_of_list

sample_json=json.dumps(sample_json,indent=4)

print(sample_json)

"""# Dumping the dictionary into a variable using json.dumps()"""

'''
As the data in the final_data variable is in tight form, without any line breaks and indentation
So, We will use 'indent' parameter that will make the file easier to read
indent=4 is used, as 4-spaces is an accepted indentation in the data science world
'''
#Dumping the data to json
formatted_json_data=json.dumps(final_data,indent=4)

"""# Writing the formatted json data to a file"""

#Wring the formatted_json_data file back to json format
#Notice, we have used 'w' here as we are writng the file this time

with open('/content/drive/MyDrive/Onelearn_Data_Science_Course/data_in_jason.json','w') as f:
    f.write(f"{formatted_json_data}")

"""# Reading back the data for validation purpose"""

#Reading the file again for the validation purpose
with open('/content/drive/MyDrive/Onelearn_Data_Science_Course/data_in_jason.json','r') as f:
    data_new=f.read()

#Parsing the data using json.load()
validation_data=json.loads(data_new)
print(type(validation_data))

"""# Validation process

* `final_data` contains the data from input JSON file `instances_val2017`
* `validation_data` contains the data from file output JSON file `data_in_jason`
"""

#Lets check the type of the both the files
print(type(final_data))
print(type(validation_data))

"""* Both have same data type"""

#Lets check the keys() of both
print(list(final_data.keys()))
print(list(validation_data.keys()))

"""* Both have same keys and count"""

#Lets check the individual keys
#First Key
print('type',type(final_data['info']),'Num. of elements = ', len(final_data['info']))
print('type',type(validation_data['info']),'Num. of elements = ', len(validation_data['info']))

"""* Both have same data type and same number of elements"""

#Second Key
print('type',type(final_data['licenses']),'Num. of elements = ', len(final_data['licenses']))
print('type',type(validation_data['licenses']),'Num. of elements = ', len(validation_data['licenses']))

"""* Both have same data type and same number of elements"""

#Third Key
print('type',type(final_data['images']),'Num. of elements = ', len(final_data['images']))
print('type',type(validation_data['images']),'Num. of elements = ', len(validation_data['images']))

"""* Both have same data type and same number of elements"""

#Fourth Key
print('type',type(final_data['annotations']),'Num. of elements = ', len(final_data['annotations']))
print('type',type(validation_data['annotations']),'Num. of elements = ', len(validation_data['annotations']))

"""* Both have same data type and same number of elements"""

#Fifth Key
print('type',type(final_data['categories']),'Num. of elements = ', len(final_data['categories']))
print('type',type(validation_data['categories']),'Num. of elements = ', len(validation_data['categories']))

"""* Both have same data type and same number of elements

* **We can observe that both the JSON files have same number of keys**
* **Number of elements indise each keys sare also same for both JSON files. Which validates that structure of both the files perfectly matches**
"""

